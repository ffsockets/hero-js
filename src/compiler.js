var solc = require('solc');
var fs = require('fs');
var path = require('path');

fs.readdir('./projects/', function(err, files) {
  var folder = [];
  (function iterator(i) {
    if (i == files.length) {
      return findSol(folder);
    }
    fs.stat('./projects/' + files[i], function(err, stats) {
      if (stats.isDirectory()) {
        folder.push(files[i]);
      }
      iterator(i + 1);
    });
  })(0);
});

function getFileType(filePath) {
  var startIndex = filePath.lastIndexOf('.');
  if (startIndex != -1) {
    return {
      type: filePath.substring(startIndex + 1, filePath.length).toLowerCase(),
      name: filePath.substring(0, startIndex).toLowerCase(),
    };
  } else {
    return '';
  }
}

function findSol(folder) {
  for (let j = 0; j < folder.length; j++) {
    fs.readdir('./projects/' + folder[j] + '/', function(err, files) {
      for (let i = 0; i < files.length; i++) {
        fs.stat('./projects/' + folder[j] + '/' + files[i], function(
          err,
          stats
        ) {
          if (stats.isDirectory()) {
          } else if (stats.isFile()) {
            let fileType = getFileType(files[i]).type;
            let fileName = getFileType(files[i]).name;
            if (fileType === 'sol') {
              return catAbi(fileName, folder);
            }
          }
        });
      }
    });
  }
}

function catAbi(name, folder) {
  for (let j = 0; j < 1; j++) {
    fs.readdir('./projects/' + folder[j] + '/app/', function(err, files) {
      // console.log(files);
      for (let i = 0; i < files.length; i++) {
        fs.stat('./projects/' + folder[j] + '/app/' + files[i], function(
          err,
          stats
        ) {
          if (stats.isFile()) {
            let fileType = getFileType(files[i]).type;
            let fileName = getFileType(files[i]).name;
            // console.log(fileType);
            // 存在.abi文件 判断是否对应
            if (fileType === 'abi') {
              if (name !== fileName) {
                return compiler(
                  `./projects/${folder[j] + '/' + name}.sol`,
                  ':GoodFortune',
                  './projects/' + folder[j] + '/app/'
                );
                // return compiler(`./projects/${folder[j]+'/'+name}.sol`, ':' + name, './projects/' + folder[j] + '/app/');
              }
            } else {
              // 不存在 直接生成
              // return compiler(`./projects/${folder[j]+'/'+name}.sol`, ':' + name, './projects/' + folder[j] + '/app/');
              return compiler(
                `./projects/${folder[j] + '/' + name}.sol`,
                ':GoodFortune',
                './projects/' + folder[j] + '/app/'
              );
            }
          }
        });
      }
    });
  }
}

function compiler(file, contractName, filePath) {
  // read contract file
  var input = fs.readFileSync(file, 'utf8').toString();
  var fileName = path.parse(file)['name'].toString();
  var contract = solc.compile(input, 1); // output result
  // console.log(contract.contracts[contractName].interface);
  // console.log(contract.contracts[contractName].bytecode); // Save the compiled generated bytecode locally
  fs.writeFile(
    filePath + fileName + '.abi',
    '0x' + contract.contracts[contractName].bytecode,
    {},
    function(err, result) {
      if (err) {
        console.log(err);
      }
    }
  ); // Save the compiled generated interface locally
  fs.writeFile(
    filePath + fileName + '.json',
    contract.contracts[contractName].interface,
    {},
    function(err, result) {
      if (err) {
        console.log(err);
      }
    }
  );
  fs.writeFile(
    filePath + fileName + '.js',
    'window.' +
      fileName +
      '=' +
      JSON.stringify(
        JSON.parse(contract.contracts[contractName].interface),
        null,
        2
      ),
    {},
    function(err, result) {
      if (err) {
        console.log(err);
      }
    }
  );
}
